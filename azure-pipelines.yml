trigger:
- main  # Trigger on push to the main branch, change to your branch name if different

pool:
  name: myUbuntuAgentPool  # Ensure the agent is correctly registered in this pool

variables:
  azureSubscription: 'MyAzureServiceConnection'  # Azure DevOps Service Connection name
  resourceGroup: 'OzResourceGroup'
  location: 'eastus'

jobs:
- job: DeployResources
  displayName: 'Deploy Resources (Network, Storage, and VM)'
  steps:

  - task: AzureCLI@2
    displayName: 'Register Microsoft.Storage Provider'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az provider register --namespace Microsoft.Storage
        az provider show --namespace Microsoft.Storage --query "registrationState"

  - task: AzureCLI@2
    displayName: 'Deploy Network Resources'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az deployment group create \
          --resource-group $(resourceGroup) \
          --template-file network-setup.json \
          --parameters @network-setup-parameters.json

  - task: AzureCLI@2
    displayName: 'Deploy Virtual Machine'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az deployment group create \
          --resource-group $(resourceGroup) \
          --template-file linux-vm.json \
          --parameters @linux-vm-parameters.json \

  - task: AzureCLI@2
    displayName: 'Deploy Storage Account'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        # Extract storage account prefix from the parameter file
        STORAGE_PREFIX=$(jq -r '.parameters.storageAccountPrefix.value' storage-accounts-parameters.json)
        
        # Generate storage account names dynamically
        STORAGE_ACCOUNTS=("${STORAGE_PREFIX}a" "${STORAGE_PREFIX}b")

        for STORAGE_NAME in "${STORAGE_ACCOUNTS[@]}"; do
          EXISTS=$(az storage account check-name --name $STORAGE_NAME --query "nameAvailable" --output tsv)

          if [[ "$EXISTS" == "false" ]]; then
            echo "Storage account $STORAGE_NAME already exists. Skipping deployment."
          else
            echo "Deploying storage account $STORAGE_NAME..."
            az deployment group create \
              --resource-group $(resourceGroup) \
              --template-file storage-accounts.json \
              --parameters @storage-accounts-parameters.json
          fi
        done
