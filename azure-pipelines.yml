trigger:
- main  # Trigger on push to the main branch, change to your branch name if different

pool:
  name: myUbuntuAgentPool  # Ensure the agent is correctly registered in this pool

variables:
  azureSubscription: 'MyAzureServiceConnection'  # Azure DevOps Service Connection name
  resourceGroup: 'OzResourceGroup'
  location: 'eastus'
  sshServiceConnection: 'MyVM_SSH_Connection'  # Azure ssh service connection name
  vmUsername: 'adminUser'
  privateKey: '~/.ssh/id_ed25519'
  vmName: 'MyLinuxVM'


jobs:
# - job: DeployResources
#   displayName: 'Deploy Resources (Network, Storage, and VM)'
#   steps:

#   - task: AzureCLI@2
#     displayName: 'Register Microsoft.Storage Provider'
#     inputs:
#       azureSubscription: $(azureSubscription)
#       scriptType: 'bash'
#       scriptLocation: 'inlineScript'
#       inlineScript: |
#         az provider register --namespace Microsoft.Storage
#         az provider show --namespace Microsoft.Storage --query "registrationState"

#   - task: AzureCLI@2
#     displayName: 'Deploy Network Resources'
#     inputs:
#       azureSubscription: $(azureSubscription)
#       scriptType: bash
#       scriptLocation: inlineScript
#       inlineScript: |
#         az deployment group create \
#           --resource-group $(resourceGroup) \
#           --template-file network-setup.json \
#           --parameters @network-setup-parameters.json

#   - task: AzureCLI@2
#     displayName: 'Deploy Virtual Machine'
#     inputs:
#       azureSubscription: $(azureSubscription)
#       scriptType: bash
#       scriptLocation: inlineScript
#       inlineScript: |
#         az deployment group create \
#           --resource-group $(resourceGroup) \
#           --template-file linux-vm.json \
#           --parameters @linux-vm-parameters.json \
#           --parameters sshPublicKey="$(cat ~/.ssh/id_ed25519.pub)"

#   - task: AzureCLI@2
#     displayName: 'Deploy Storage Account'
#     inputs:
#       azureSubscription: $(azureSubscription)
#       scriptType: bash
#       scriptLocation: inlineScript
#       inlineScript: |
#         az deployment group create \
#           --resource-group $(resourceGroup) \
#           --template-file storage-accounts.json \
#           --parameters @storage-accounts-parameters.json \

- job: BlobMigration
  #dependsOn: DeployResources
  displayName: 'Blob Migration Job'
  steps:
    - task: AzureCLI@2
      displayName: 'Copy blob_migration.ps1 to VM'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Define VM details and the local script path
          VM_IP=$(az vm show -d -g $(resourceGroup) -n $(vmName) --query "publicIps" -o tsv)
          LOCAL_SCRIPT_PATH="$(Build.SourcesDirectory)/blob_migration.ps1"
          REMOTE_PATH="/home/$(vmUsername)/blob_migration.ps1"

          # Copy the script to the VM using SCP
          echo "VM_IP: $(VM_IP)"
          echo "vmUsername: $(vmUsername)"
          scp -v -i ~/.ssh/id_ed25519 $LOCAL_SCRIPT_PATH $(vmUsername)@$VM_IP:$REMOTE_PATH
    
    - task: SSH@0
      displayName: 'Run PowerShell script on VM'
      inputs:
        sshEndpoint: $(sshServiceConnection) # Azure DevOps Service Connection for SSH (you'll configure this)
        runOptions: 'inline'
        inline: |
          # Ensure PowerShell Core is installed (if not already)
          echo "Installing PowerShell Core..."
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

          # Download and install the Microsoft signing key
          echo "Downloading and installing the Microsoft signing key..."
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-archive-keyring.gpg

          # Add the Azure CLI repository
          echo "Adding the Azure CLI repository..."
          echo "deb [signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" \
              | sudo tee /etc/apt/sources.list.d/azure-cli.list

          # Update package lists and install Azure CLI
          echo "Updating package lists and installing Azure CLI..."
          sudo apt update
          sudo apt install -y azure-cli

          echo "Logging in to Azure CLI..."
          echo "$(AZURE_CLIENT_ID)"
          echo "$(AZURE_CLIENT_SECRET)"
          echo "$(AZURE_TENANT_ID)"
          az login --service-principal -u "$(AZURE_CLIENT_ID)" -p "$(AZURE_CLIENT_SECRET)" --tenant "$(AZURE_TENANT_ID)"

          # Change file permissions to make it executable
          echo "Changing file permissions to make it executable..."
          sudo chmod +x /home/$(vmUsername)/blob_migration.ps1

          # Run the PowerShell script
          echo "Running the PowerShell script..."
          pwsh /home/$(vmUsername)/blob_migration.ps1
      env:
        AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
        AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        AZURE_TENANT_ID: $(AZURE_TENANT_ID)

# - job: BlobMigration
#   dependsOn: DeployResources
#   displayName: 'Blob Migration Job'
#   steps:
#     - task: AzureCLI@2
#       displayName: 'Run Blob Migration Script with Managed Identity'
#       inputs:
#         azureSubscription: $(azureSubscription)
#         scriptType: pscore
#         scriptLocation: inlineScript
#         inlineScript: |
#           pwsh blob_migration.ps1 -sourceStorageAccount "ozstorageaccounta" -destinationStorageAccount "ozstorageaccountb" -containerName "mycontainer"

